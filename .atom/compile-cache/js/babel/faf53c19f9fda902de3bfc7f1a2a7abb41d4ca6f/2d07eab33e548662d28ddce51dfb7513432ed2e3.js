Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.guessName = guessName;
exports.installPackages = installPackages;
exports.packagesToInstall = packagesToInstall;

var _atom = require('atom');

'use babel';

var extractionRegex = /Installing (.*?) to .* (.*)/;
var nameRegexes = [/[\\\/]packages[\\\/](.*?)[\\\/]/, /[\\\/]([\w-_]+)[\\\/](?:lib|src)[\\\/]/i, /[\\\/]([\w-_]+)[\\\/][\w-_]+\..+$/];

function guessName(filePath) {
  var matches = undefined;

  matches = nameRegexes[0].exec(filePath);
  if (matches) {
    return matches[1];
  }
  matches = nameRegexes[1].exec(filePath);
  if (matches) {
    return matches[1];
  }
  matches = nameRegexes[2].exec(filePath);
  if (matches) {
    return matches[1];
  }
  return null;
}

function installPackages(dependencies, progressCallback) {
  return new Promise(function (resolve, reject) {
    var errors = [];
    new _atom.BufferedProcess({
      command: atom.packages.getApmPath(),
      args: ['install'].concat(dependencies).concat(['--production', '--color', 'false']),
      options: {},
      stdout: function stdout(contents) {
        var matches = extractionRegex.exec(contents);
        atom.packages.activatePackage(matches[1]);
        if (matches[2] === 'âœ“' || matches[2] === 'done') {
          progressCallback(matches[1], true);
        } else {
          progressCallback(matches[1], false);
          errors.push(contents);
        }
      },
      stderr: function stderr(contents) {
        errors.push(contents);
      },
      exit: function exit() {
        if (errors.length) {
          var error = new Error('Error installing dependencies');
          error.stack = errors.join('');
          reject(error);
        } else resolve();
      }
    });
  });
}

function packagesToInstall(name) {
  var packageInfo = atom.packages.getLoadedPackage(name);

  var toInstall = [],
      toEnable = [];
  (packageInfo ? packageInfo.metadata['package-deps'] ? packageInfo.metadata['package-deps'] : [] : []).forEach(function (name) {
    if (!window.__steelbrain_package_deps.has(name)) {
      window.__steelbrain_package_deps.add(name);
      if (atom.packages.resolvePackagePath(name)) {
        toEnable.push(name);
      } else {
        toInstall.push(name);
      }
    }
  });

  return { toInstall: toInstall, toEnable: toEnable };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3pndi8uYXRvbS9wYWNrYWdlcy9saW50ZXItZmxha2U4L25vZGVfbW9kdWxlcy9hdG9tLXBhY2thZ2UtZGVwcy9saWIvaGVscGVycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O29CQUU4QixNQUFNOztBQUZwQyxXQUFXLENBQUE7O0FBR1gsSUFBTSxlQUFlLEdBQUcsNkJBQTZCLENBQUE7QUFDckQsSUFBTSxXQUFXLEdBQUcsQ0FDbEIsaUNBQWlDLEVBQ2pDLHlDQUF5QyxFQUN6QyxtQ0FBbUMsQ0FDcEMsQ0FBQTs7QUFFTSxTQUFTLFNBQVMsQ0FBQyxRQUFRLEVBQUU7QUFDbEMsTUFBSSxPQUFPLFlBQUEsQ0FBQTs7QUFFWCxTQUFPLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUN2QyxNQUFJLE9BQU8sRUFBRTtBQUNYLFdBQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0dBQ2xCO0FBQ0QsU0FBTyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDdkMsTUFBSSxPQUFPLEVBQUU7QUFDWCxXQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtHQUNsQjtBQUNELFNBQU8sR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQ3ZDLE1BQUksT0FBTyxFQUFFO0FBQ1gsV0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7R0FDbEI7QUFDRCxTQUFPLElBQUksQ0FBQTtDQUNaOztBQUVNLFNBQVMsZUFBZSxDQUFDLFlBQVksRUFBRSxnQkFBZ0IsRUFBRTtBQUM5RCxTQUFPLElBQUksT0FBTyxDQUFDLFVBQVMsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUMzQyxRQUFNLE1BQU0sR0FBRyxFQUFFLENBQUE7QUFDakIsOEJBQW9CO0FBQ2xCLGFBQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRTtBQUNuQyxVQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNuRixhQUFPLEVBQUUsRUFBRTtBQUNYLFlBQU0sRUFBRSxnQkFBUyxRQUFRLEVBQUU7QUFDekIsWUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUM5QyxZQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN6QyxZQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLE1BQU0sRUFBRTtBQUMvQywwQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7U0FDbkMsTUFBTTtBQUNMLDBCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQTtBQUNuQyxnQkFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtTQUN0QjtPQUNGO0FBQ0QsWUFBTSxFQUFFLGdCQUFTLFFBQVEsRUFBRTtBQUN6QixjQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO09BQ3RCO0FBQ0QsVUFBSSxFQUFFLGdCQUFXO0FBQ2YsWUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO0FBQ2pCLGNBQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUE7QUFDeEQsZUFBSyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQzdCLGdCQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7U0FDZCxNQUFNLE9BQU8sRUFBRSxDQUFBO09BQ2pCO0tBQ0YsQ0FBQyxDQUFBO0dBQ0gsQ0FBQyxDQUFBO0NBQ0g7O0FBRU0sU0FBUyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUU7QUFDdEMsTUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTs7QUFFdEQsTUFBTSxTQUFTLEdBQUcsRUFBRTtNQUFFLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFDcEMsR0FBQyxXQUFXLEdBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsR0FBSSxFQUFFLENBQUEsQ0FDbkcsT0FBTyxDQUFDLFVBQVMsSUFBSSxFQUFFO0FBQ3RCLFFBQUksQ0FBQyxNQUFNLENBQUMseUJBQXlCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQy9DLFlBQU0sQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDMUMsVUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxFQUFFO0FBQzFDLGdCQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO09BQ3BCLE1BQU07QUFDTCxpQkFBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtPQUNyQjtLQUNGO0dBQ0YsQ0FBQyxDQUFBOztBQUVKLFNBQU8sRUFBQyxTQUFTLEVBQVQsU0FBUyxFQUFFLFFBQVEsRUFBUixRQUFRLEVBQUMsQ0FBQTtDQUM3QiIsImZpbGUiOiIvaG9tZS96Z3YvLmF0b20vcGFja2FnZXMvbGludGVyLWZsYWtlOC9ub2RlX21vZHVsZXMvYXRvbS1wYWNrYWdlLWRlcHMvbGliL2hlbHBlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJ1xuXG5pbXBvcnQge0J1ZmZlcmVkUHJvY2Vzc30gZnJvbSAnYXRvbSdcbmNvbnN0IGV4dHJhY3Rpb25SZWdleCA9IC9JbnN0YWxsaW5nICguKj8pIHRvIC4qICguKikvXG5jb25zdCBuYW1lUmVnZXhlcyA9IFtcbiAgL1tcXFxcXFwvXXBhY2thZ2VzW1xcXFxcXC9dKC4qPylbXFxcXFxcL10vLFxuICAvW1xcXFxcXC9dKFtcXHctX10rKVtcXFxcXFwvXSg/OmxpYnxzcmMpW1xcXFxcXC9dL2ksXG4gIC9bXFxcXFxcL10oW1xcdy1fXSspW1xcXFxcXC9dW1xcdy1fXStcXC4uKyQvXG5dXG5cbmV4cG9ydCBmdW5jdGlvbiBndWVzc05hbWUoZmlsZVBhdGgpIHtcbiAgbGV0IG1hdGNoZXNcblxuICBtYXRjaGVzID0gbmFtZVJlZ2V4ZXNbMF0uZXhlYyhmaWxlUGF0aClcbiAgaWYgKG1hdGNoZXMpIHtcbiAgICByZXR1cm4gbWF0Y2hlc1sxXVxuICB9XG4gIG1hdGNoZXMgPSBuYW1lUmVnZXhlc1sxXS5leGVjKGZpbGVQYXRoKVxuICBpZiAobWF0Y2hlcykge1xuICAgIHJldHVybiBtYXRjaGVzWzFdXG4gIH1cbiAgbWF0Y2hlcyA9IG5hbWVSZWdleGVzWzJdLmV4ZWMoZmlsZVBhdGgpXG4gIGlmIChtYXRjaGVzKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNbMV1cbiAgfVxuICByZXR1cm4gbnVsbFxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5zdGFsbFBhY2thZ2VzKGRlcGVuZGVuY2llcywgcHJvZ3Jlc3NDYWxsYmFjaykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgY29uc3QgZXJyb3JzID0gW11cbiAgICBuZXcgQnVmZmVyZWRQcm9jZXNzKHtcbiAgICAgIGNvbW1hbmQ6IGF0b20ucGFja2FnZXMuZ2V0QXBtUGF0aCgpLFxuICAgICAgYXJnczogWydpbnN0YWxsJ10uY29uY2F0KGRlcGVuZGVuY2llcykuY29uY2F0KFsnLS1wcm9kdWN0aW9uJywgJy0tY29sb3InLCAnZmFsc2UnXSksXG4gICAgICBvcHRpb25zOiB7fSxcbiAgICAgIHN0ZG91dDogZnVuY3Rpb24oY29udGVudHMpIHtcbiAgICAgICAgY29uc3QgbWF0Y2hlcyA9IGV4dHJhY3Rpb25SZWdleC5leGVjKGNvbnRlbnRzKVxuICAgICAgICBhdG9tLnBhY2thZ2VzLmFjdGl2YXRlUGFja2FnZShtYXRjaGVzWzFdKVxuICAgICAgICBpZiAobWF0Y2hlc1syXSA9PT0gJ+KckycgfHwgbWF0Y2hlc1syXSA9PT0gJ2RvbmUnKSB7XG4gICAgICAgICAgcHJvZ3Jlc3NDYWxsYmFjayhtYXRjaGVzWzFdLCB0cnVlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2dyZXNzQ2FsbGJhY2sobWF0Y2hlc1sxXSwgZmFsc2UpXG4gICAgICAgICAgZXJyb3JzLnB1c2goY29udGVudHMpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzdGRlcnI6IGZ1bmN0aW9uKGNvbnRlbnRzKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKGNvbnRlbnRzKVxuICAgICAgfSxcbiAgICAgIGV4aXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdFcnJvciBpbnN0YWxsaW5nIGRlcGVuZGVuY2llcycpXG4gICAgICAgICAgZXJyb3Iuc3RhY2sgPSBlcnJvcnMuam9pbignJylcbiAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgIH0gZWxzZSByZXNvbHZlKClcbiAgICAgIH1cbiAgICB9KVxuICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFja2FnZXNUb0luc3RhbGwobmFtZSkge1xuICBsZXQgcGFja2FnZUluZm8gPSBhdG9tLnBhY2thZ2VzLmdldExvYWRlZFBhY2thZ2UobmFtZSlcblxuICBjb25zdCB0b0luc3RhbGwgPSBbXSwgdG9FbmFibGUgPSBbXTtcbiAgKHBhY2thZ2VJbmZvID8gKHBhY2thZ2VJbmZvLm1ldGFkYXRhWydwYWNrYWdlLWRlcHMnXSA/IHBhY2thZ2VJbmZvLm1ldGFkYXRhWydwYWNrYWdlLWRlcHMnXSA6IFtdKSA6IFtdKVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIGlmICghd2luZG93Ll9fc3RlZWxicmFpbl9wYWNrYWdlX2RlcHMuaGFzKG5hbWUpKSB7XG4gICAgICAgIHdpbmRvdy5fX3N0ZWVsYnJhaW5fcGFja2FnZV9kZXBzLmFkZChuYW1lKVxuICAgICAgICBpZiAoYXRvbS5wYWNrYWdlcy5yZXNvbHZlUGFja2FnZVBhdGgobmFtZSkpIHtcbiAgICAgICAgICB0b0VuYWJsZS5wdXNoKG5hbWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG9JbnN0YWxsLnB1c2gobmFtZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgcmV0dXJuIHt0b0luc3RhbGwsIHRvRW5hYmxlfVxufVxuIl19
//# sourceURL=/home/zgv/.atom/packages/linter-flake8/node_modules/atom-package-deps/lib/helpers.js
